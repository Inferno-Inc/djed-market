'use strict';

var _ = require( 'lodash' );
var BaseView = require( 'djed/interface/view/View' );

module.exports = BaseView.extend( {

  initialize: function ( state ) {
    this.state = state;
    this.listenTo( state.activeToggleModel, 'change', this.render );
    this.initializeBSModal();
  },

  show: function () {
    this.$modal.modal( 'show' );
  },

  hide: function () {
    this.$modal.modal( 'hide' );
  },

  initializeBSModal: function () {
    this.$modal = this.state.render();
    this.$modal.modal( {
      keyboard: false,
      backdrop: false,
      show: false
    } );

    this.$modal.on( 'show.bs.modal', _.bind( this.onShowing, this ) );
    this.$modal.on( 'hide.bs.modal', _.bind( this.onHiding, this ) );
    this.$modal.on( 'shown.bs.modal', _.bind( this.onShown, this ) );
    this.$modal.on( 'hidden.bs.modal', _.bind( this.onHidden, this ) );
  },

  onShowing: function () {
    this.trigger( 'opening' );
  },

  onHiding: function () {
    this.trigger( 'closing' );
  },

  onShown: function () {
    this.trigger( 'opened' );
  },

  onHidden: function () {
    this.trigger( 'closed' );
  },

  render: function () {
    var $cover = this.state.$cover;
    var onCoverClick = _.bind( function ( evt ) {
      evt.stopPropagation();
      this.state.activeToggleModel.toggle( false );
    }, this );

    if ( this.state.activeToggleModel.isActive() ) {
      this.$modal.modal( 'show' );
      $cover.addClass( 'block' ).removeClass( 'none' );
      $cover.click( onCoverClick );
    } else {
      this.$modal.modal( 'hide' );
      $cover.addClass( 'none' ).removeClass( 'block' );
      $cover.off( 'click', onCoverClick );
    }
  }

} );
