'use strict';

var _ = require( 'lodash' );
var $ = require( 'jquery' );
var View = require( 'djed/interface/view/View' );
var ladda = require( 'ladda/dist/ladda.min' );

module.exports = View.extend( {

  labels: {
    text: 'Note',
    email: 'Email',
    name: 'Name'
  },

  order: [ 'name', 'email', 'text' ],

  events: {
    'input .contact-name': 'setName',
    'input .contact-email': 'setEmail',
    'input .contact-note': 'setNote',
    'click button': 'sendNote'
  },

  initialize: function () {
    this.listenTo( this.model, 'change', this.render );
    this.listenTo( this.model, 'invalid', this.onInvalid );
    this.ladda = ladda.create( this.$( '.ladda-button' )[ 0 ] );
  },

  render: function () {
    this.$( '.contact-name' ).val( this.model.get( 'name' ) );
    this.$( '.contact-email' ).val( this.model.get( 'email' ) );
    this.$( '.contact-note' ).val( this.model.get( 'text' ) );
  },

  renderErrors: function ( model, errors ) {
    this.renderErrorLess();
    _.each( errors, function ( error, key ) {
      var input = this.$( '[name=' + key + ']' );
      input.siblings( 'span' ).text( error );
      input.parents( 'label' ).addClass( 'error' );
    }, this );
  },

  renderErrorLess: function () {
    _.each( this.labels, function ( label, key ) {
      var input = this.$( '[name=' + key + ']' );
      input.siblings( 'span' ).text( label );
      input.parents( 'label' ).removeClass( 'error' );
    }, this );
  },

  onInvalid: function ( model, errors ) {
    this.hasValidated = true;
    this.renderErrors( model, errors );
  },

  setName: function ( evt ) {
    this.model.set( 'name', this.$( evt.currentTarget ).val() );
    this.validate();
  },

  setEmail: function ( evt ) {
    this.model.set( 'email', this.$( evt.currentTarget ).val() );
    this.validate();
  },

  setNote: function ( evt ) {
    this.model.set( 'text', this.$( evt.currentTarget ).val() );
    this.validate();
  },

  validate: function () {
    if ( this.hasValidated ) {
      this.renderErrorLess();
      this.model.isValid();
    }
  },

  sendNote: function ( evt ) {
    var self = this;
    var errors, firstErrorInput;
    evt.preventDefault();
    this.$( '.success' ).remove();
    this.trigger( 'track', 'Submitting Contact Us Note', this.model.toJSON() );
    if ( this.model.isValid() ) {
      this.trigger( 'track', 'Saving Contact Us Note', this.model.toJSON() );
      this.renderErrorLess();
      this.ladda.start();
      this.model.save()
        .done( function () {
          self.trigger( 'track', 'Successfully Saved Contact Us Note' );
        } )
        .fail( function () {
          window.Raven.captureException( 'Contact Us POST Fail', {
            tags: self.model.toJSON()
          } );
        } )
        .always( ( function () {
          var $thanks = $( '<p style="opacity: 0" class="success">Thanks for the feedback!</p>' );
          this.ladda.stop();
          this.model.clear();

          this.$( 'button' ).after( $thanks );
          $thanks.velocity( {
            opacity: 1
          }, {
            duration: 300
          } );

          setTimeout( function () {
            $thanks.velocity( {
              opacity: 0
            }, {
              complete: function () {
                $thanks.remove();
              }
            } );
          }, 5000 );
        } ).bind( this ) );
    } else {
      errors = this.model.validate();
      this.trigger( 'track', 'Errors in Contact Us Note', errors );
      _( this.order ).some( function ( key ) {
        if ( _( errors ).keys().contains( key ) ) {
          firstErrorInput = this.$( '[name=' + key + ']' );
          firstErrorInput.focus();

          if ( this.$el.height() > $( window ).height() ) {
            $( "html" ).velocity( "scroll", {
              delay: 300,
              duration: 400,
              easing: 'easeInOutQuint',
              offset: firstErrorInput.offset().top - 50,
              mobileHA: false
            } );
          }

          return true;
        }
      }, this );
    }

  }

} );
