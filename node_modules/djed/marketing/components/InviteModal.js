'use strict';

var _ = require( 'lodash' );
var $ = require( 'jquery' );
var View = require( 'djed/interface/view/View' );
var ladda = require( 'ladda/dist/ladda.min' );
var trackFB = require( 'djed/marketing/trackFacebook' );

module.exports = View.extend( {

  className: 'request-invite-modal',

  labels: {
    text: 'Note',
    email: 'Email',
    name: 'Name'
  },

  order: [ 'name', 'email', 'text' ],

  events: {
    'input .name': 'setName',
    'input .email': 'setEmail',
    'click .sign-up': 'sendInviteRequest',
    'click .icon-close': 'close'
  },

  initialize: function ( options ) {
    this.template = _.template( options.template );
    this.listenTo( this.model, 'invalid', this.onInvalid );
  },

  render: function () {
    this.$el.html( this.template() );
    this.ladda = ladda.create( this.$( '.ladda-button' )[ 0 ] );
    return this;
  },

  renderErrors: function ( model, errors ) {
    this.renderErrorLess();
    _.each( errors, function ( error, key ) {
      var input = this.$( '[name=' + key + ']' );
      input.siblings( 'span' ).text( error );
      input.parents( 'label' ).addClass( 'error' );
    }, this );
  },

  renderErrorLess: function () {
    _.each( this.labels, function ( label, key ) {
      var input = this.$( '[name=' + key + ']' );
      input.siblings( 'span' ).text( label );
      input.parents( 'label' ).removeClass( 'error' );
    }, this );
  },

  onInvalid: function ( model, errors ) {
    this.hasValidated = true;
    this.renderErrors( model, errors );
  },

  validate: function () {
    if ( this.hasValidated ) {
      this.renderErrorLess();
      this.model.isValid();
    }
  },

  transitionIn: function () {
    this.$el.velocity( 'stop' );
    this.$el.css( 'opacity', 0 );
    this.$el.velocity( {
      translateY: [ 0, 400 ],
      opacity: [ 1, 0 ],
      scale: [ 1, 0 ]
    }, {
      easing: [ 200, 20 ],
      display: 'block'
    } );
  },

  transitionOut: function () {
    this.$el.velocity( 'stop' );
    this.$el.velocity( {
      opacity: [ 0, 1 ],
      scale: [ 0.5, 1 ],
      translateY: [ 50, 0 ]
    }, {
      duration: 500,
      easing: 'easeInOutQuint',
      display: 'none'
    } );
  },

  fillInputs: function () {
    this.$( '.name' ).val( this.model.get( 'name' ) );
    this.$( '.email' ).val( this.model.get( 'email' ) );
  },

  setName: function ( evt ) {
    this.model.set( 'name', this.$( evt.currentTarget ).val() );
    this.validate();
  },

  setEmail: function ( evt ) {
    this.model.set( 'email', this.$( evt.currentTarget ).val() );
    this.validate();
  },

  sendInviteRequest: function ( evt ) {
    var self = this;
    var errors, firstErrorInput;
    evt.preventDefault();
    this.trigger( 'track', 'Submitting Invite Request', this.model.toJSON() );
    if ( this.model.isValid() ) {
      this.renderErrorLess();
      this.showLoading();
      this.trigger( 'track', 'Submitted Invite Request', this.model.toJSON() );
      this.model.save()
        .done( function () {
          self.trigger( 'track', 'Successfully created Invite Request', self.model.toJSON() );
          var status = self.model.get( 'status' );
          if ( status === 'already-on-list' ) {
            self.$( '.content-style-form h2' ).text( 'Thanks! You\'re still on the list.' );
          } else if ( status === 'added-to-list' ) {
            self.$( '.content-style-form h2' ).text( 'Thanks, we got your request!' );
          }
        } )
        .fail( function () {
          window.Raven.captureException( 'Invite Request POST Fail', {
            tags: self.model.toJSON()
          } );
        } )
        .always( function () {
          var $panels = self.$( '.content-style-form' );
          self.hideLoading();
          self.model.clear();
          $panels.first().velocity( {
            opacity: 0
          }, {
            duration: 300
          } );
          $panels.eq( 1 ).velocity( {
            opacity: 1
          }, {
            display: 'block',
            duration: 300,
            complete: function () {
              $panels.first().css( 'visibility', 'hidden' );
              trackFB();
            }
          } );

        } );
    } else {
      errors = this.model.validate();
      this.trigger( 'track', 'Errors in Invite Request', errors );
      _( this.order ).some( function ( key ) {
        if ( _( errors ).keys().contains( key ) ) {
          firstErrorInput = this.$( '[name=' + key + ']' );
          firstErrorInput.focus();

          if ( this.$el.height() > $( window ).height() ) {
            $( "html" ).velocity( "scroll", {
              delay: 300,
              duration: 500,
              easing: 'easeInOutQuint',
              offset: firstErrorInput.offset().top - 50,
              mobileHA: false
            } );
          }

          return true;
        }
      }, this );
    }
  },

  showLoading: function () {
    this.ladda.start();
  },

  hideLoading: function () {
    this.ladda.stop();
  },

  close: function () {
    this.trigger( 'close' );
  },

  reset: function () {
    var $panels = this.$( '.content-style-form' );
    $panels.first().css( 'display', 'block' );
    $panels.eq( 1 ).css( 'display', 'none' );
    $panels.css( {
      'opacity': 1
    } );
  }

} );
