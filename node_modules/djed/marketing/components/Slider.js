'use strict';

var _ = require( 'lodash' );
var $ = require( 'jquery' );
var View = require( 'djed/interface/view/View' );
var Hammer = require( 'hammerjs' );

var marqueeTpl = _.template( '<div class="hero-lifestyle <%= slider["hero-lifestyle-key"] %>">' +
  '<div class="hero-headline">' +
  '<h1><%= slider.headline %></h1>' +
  '<div class="hero-underline <%= slider.underline %>"></div><p class="book"><%= slider.subhead %></p>' +
  '</div></div>' );

var isEqual = function ( first, second ) {
  return !!_( first )
    .zip( second )
    .map( function ( pair ) {
      return pair[ 0 ] === pair[ 1 ];
    } )
    .compact()
    .value()
    .length;
};

var notASwipe = function ( cards, $cards ) {
  var cardIds = _.map( cards, function ( card ) {
    return card.get( 'id' );
  } );

  var $cardIds = _( $cards.toArray() )
    .reverse()
    .map( function ( el ) {
      return $( el ).attr( 'data-id' );
    } )
    .value();

  var isLeftSwipe = function () {

    var $cardIdStart = $cardIds.slice( $cardIds.length - 2 );
    var cardIdEnd = cardIds.slice( 0, 2 );
    return isEqual( $cardIdStart, cardIdEnd );
  };

  var isRightSwipe = function () {
    var $cardIdStart = $cardIds.slice( 0, 2 );
    var cardIdEnd = cardIds.slice( $cardIds.length - 2 );
    return isEqual( $cardIdStart, cardIdEnd );
  };

  return !isLeftSwipe() && !isRightSwipe();

};

module.exports = View.extend( {

  cardWidthHeightRatio: 1.48,
  cardHeightPercentage: 0.8,
  xOffsetMultiplier: 0.5,

  slideTime: 300,

  events: {
    'click .left-hotspot': 'swipeRight',
    'click .right-hotspot': 'swipeLeft',
    'mouseenter .left-hotspot': 'wiggleRight',
    'mouseenter .right-hotspot': 'wiggleLeft',
    'mouseenter .hero-container': 'wiggleRight',
    'click .hero-container': 'heroClicked'
  },

  initialize: function ( options ) {
    this.slideTime = options.slideTime || this.slideTime;
    this.listenTo( this.model, 'switch', this.render );
    this.initializeCards();

    this.$( '.hero-product' ).hammer( {
      direction: Hammer.DIRECTION_HORIZONTAL,
      threshold: 1
    } ).bind( 'swipe', ( function ( evt ) {

      var direction = evt.gesture.direction;
      if ( direction === Hammer.DIRECTION_LEFT ) {
        this.trigger( 'track', 'User Swiped Slider Left' );
        this.swipeLeft();
      } else if ( direction === Hammer.DIRECTION_RIGHT ) {
        this.trigger( 'track', 'User Swiped Slider Right' );
        this.swipeRight();
      }

    } ).bind( this ) );

    $( window ).on( 'resize.slider', ( function () {
      if ( !this.transitioning ) {
        this.positionCards();
      }
    } ).bind( this ) );

  },

  swipeLeft: function () {
    if ( !this.transitioning ) {
      this.model.goLeft();
    }
  },

  swipeRight: function () {
    if ( !this.transitioning ) {
      this.model.goRight();
    }
  },

  heroClicked: function () {
    this.trigger( 'track', 'Slider Hero clicked' );
    this.swipeRight();
  },

  wiggleLeft: _.throttle( function () {
    var $cards = this.$( '.hero-card' );
    var $cardToEase = $cards.last();
    var currentTranslateX = parseInt( $cardToEase.attr( 'data-translateX' ) );
    var wiggleTranslateX = currentTranslateX - 10;
    if ( $cards.length > 1 ) {
      this.trigger( 'track', 'Slider Wiggle on Left' );
      $cardToEase.velocity( {
        translateX: [ wiggleTranslateX, currentTranslateX ]
      }, {
        duration: 200,
        easing: 'easeInOutQuint',
        complete: ( function () {
          $cardToEase.velocity( {
            translateX: [ currentTranslateX, wiggleTranslateX ]
          }, {
            duration: 400,
            easing: 'easeInOutQuint'
          } );
        } ).bind( this )
      } );
    }
  }, 1000 ),

  wiggleRight: _.throttle( function () {
    var $cards = this.$( '.hero-card' );
    var $cardToEase = $cards.first();
    var currentTranslateX = parseInt( $cardToEase.attr( 'data-translateX' ) );
    var wiggleTranslateX = currentTranslateX + 10;
    if ( $cards.length > 1 ) {
      this.trigger( 'track', 'Slider Wiggle on Right' );
      $cardToEase.velocity( {
        translateX: [ wiggleTranslateX, currentTranslateX ]
      }, {
        duration: 200,
        easing: 'easeInOutQuint',
        complete: ( function () {
          $cardToEase.velocity( {
            translateX: [ currentTranslateX, wiggleTranslateX ]
          }, {
            duration: 400,
            easing: 'easeInOutQuint'
          } );
        } ).bind( this )
      } );
    }
  }, 1000 ),

  slideLeft: function ( offsetX, cardWidth ) {
    var self = this;
    var $cards = this.$( '.hero-card' );
    var lastIndex = $cards.length - 1;
    this.transitioning = true;

    setTimeout( function () {
      self.transitionBackground();
    }, this.slideTime + this.slideTime * 0.25 + this.slideTime / 2 );

    $cards.each( function ( i ) {
      var $el = $( this );
      var currentTransform = parseInt( $el.attr( 'data-translateX' ) );
      var newTranslateX = currentTransform - cardWidth - offsetX;

      $( this ).attr( 'data-translateX', newTranslateX );
      $( this ).velocity( {
        translateX: [ newTranslateX, currentTransform ],
      }, {
        duration: 300,
        easing: 'easeOutQuint',
        complete: function () {
          if ( lastIndex === i ) {
            self.$( '.hero-card' ).first().remove();
            self.transitioning = false;
          }
        }
      } );
    } );
  },

  slideRight: function ( offsetX, cardWidth ) {
    var self = this;
    var $cards = this.$( '.hero-card' );
    var lastIndex = $cards.length - 1;
    this.transitioning = true;

    setTimeout( function () {
      self.transitionBackground();
    }, this.slideTime + this.slideTime * 0.25 + this.slideTime / 2 );

    $cards.each( function ( i ) {
      var $el = $( this );
      var currentTransform = parseInt( $el.attr( 'data-translateX' ) );
      var newTranslateX = currentTransform + cardWidth + offsetX;
      $( this ).attr( 'data-translateX', newTranslateX );
      $( this ).velocity( {
        translateX: [ newTranslateX, currentTransform ],
      }, {
        duration: self.slideTime,
        easing: 'easeOutQuint',
        complete: function () {
          if ( lastIndex === i ) {
            self.$( '.hero-card' ).last().remove();
            self.transitioning = false;
          }
        }
      } );
    } );
  },

  transitionBackground: function () {
    var data = this.model.getActiveContent();
    var $heroProduct = this.$( '.hero-product' );
    var $coverEl = this.generateBackgroundEl( data.get( 'slider' ) );

    $coverEl.appendTo( $heroProduct );
    $heroProduct.removeClass().addClass( 'hero-product ' + data.get( 'slider' )[ 'hero-product-key' ] );
    $coverEl.velocity( {
      opacity: 0
    }, {
      duration: this.slideTime,
      complete: function () {
        $coverEl.remove();
      }
    } );
  },

  render: function () {
    var $heroProduct = this.$( '.hero-product' );
    var $cards = this.$( '.hero-card' );

    $cards.velocity( 'stop' );

    var containerHeight = $heroProduct.height();
    var cardWidth = Math.floor( containerHeight * this.cardHeightPercentage / this.cardWidthHeightRatio );
    var cardHeight = Math.floor( cardWidth * this.cardWidthHeightRatio );
    var cards = this.model.getSurroundingContent();
    var newCard = _( cards ).difference( this.cards ).first();
    var top = ( containerHeight / 2 ) - ( cardHeight / 2 );
    var $newCard;
    var translateX;

    if ( $cards.length > 1 ) {

      this.transitionMarquee();

      if ( notASwipe( cards, $cards ) ) {
        // reset
        $cards.remove();
        $heroProduct.append( this.generateCardEl( cards[ 1 ].get( 'slider' ) ) );
        this.initializeCards();
        this.transitionBackground();

      } else {

        // slide
        this.positionCards();

        if ( newCard.id === _.first( cards ).id ) {
          translateX = 2 * ( cardWidth + this.xOffset );
          $newCard = this.generateCardEl( newCard.get( 'slider' ), newCard.id, true );
          $newCard.css( {
              'top': top,
              'left': this.left,
              'transform': 'translateX(' + translateX.toString() + 'px)',
              'width': cardWidth,
              'height': cardHeight
            } )
            .attr( 'data-translateX', translateX );

          $heroProduct.append( $newCard );
          this.slideLeft( this.xOffset, cardWidth );

        } else if ( newCard.id === _.last( cards ).id ) {
          translateX = 2 * ( 0 - cardWidth - this.xOffset );
          $newCard = this.generateCardEl( newCard.get( 'slider' ), newCard.id, true );
          $newCard.css( {
              'top': top,
              'left': this.left,
              'width': cardWidth,
              'height': cardHeight
            } )
            .attr( 'data-translateX', translateX );

          $heroProduct.prepend( $newCard );
          this.slideRight( this.xOffset, cardWidth );
        }

      }

      this.cards = cards;

    }

  },

  transitionMarquee: function () {
    var data = this.model.getActiveContent().get( 'slider' );
    var $oldMarquee = this.$( '.hero-lifestyle' ).first();
    var $newMarquee = $( marqueeTpl( {
      slider: data
    } ) );
    $newMarquee.css( 'opacity', 0 );
    this.$( '.hero-container' ).append( $newMarquee );
    $newMarquee.velocity( {
      opacity: 1
    }, {
      delay: this.slideTime + this.slideTime * 0.25,
      duration: this.slideTime / 2,
      complete: ( function () {
        setTimeout( function () {
          $oldMarquee.remove();
        }, 300 );
      } ).bind( this )
    } );
  },

  transitionIn: function () {
    this.$( '.hero-card' ).velocity( {
      opacity: 1
    }, {
      duration: 200
    } );
  },

  generateBackgroundEl: function ( data ) {
    return $( '<div class="hero-product-bg' + data[ 'hero-product-key' ] + '"></div>' );
  },

  generateCardEl: function ( data, id, doShow ) {
    return $( '<div class="hero-card" data-id="' + id + '" style="' + ( doShow ? 'opacity:1;' : '' ) + ' background-image: url(\'' + data[ 'hero-product-imagepath' ] + '\');"></div>' );
  },

  positionCards: function () {
    var self = this;
    var $heroProducts = this.$( '.hero-product' );
    var $cards = this.$( '.hero-card' );
    var numHeroes = $cards.length;
    var containerWidth = $heroProducts.width();
    var containerHeight = $heroProducts.height();
    var cardWidth = Math.floor( containerHeight * this.cardHeightPercentage / this.cardWidthHeightRatio );
    var cardHeight = Math.floor( cardWidth * self.cardWidthHeightRatio );
    var left = ( containerWidth / 2 ) - ( cardWidth / 2 );
    var top = ( containerHeight / 2 ) - ( cardHeight / 2 );

    this.xOffset = left * this.xOffsetMultiplier;
    this.left = left;

    $cards.each( function ( i ) {
      var counterOffset = ( ( numHeroes > 1 ) ? i - 1 : 0 );
      var translateX = ( counterOffset * ( cardWidth + self.xOffset ) ).toString();
      $( this )
        .css( {
          'top': top,
          'left': left,
          'transform': 'translateX(' + translateX + 'px)',
          'width': cardWidth,
          'height': cardHeight
        } )
        .attr( 'data-translateX', translateX );

    } );

  },

  initializeCards: function () {
    this.cards = _.compact( this.model.getSurroundingContent() );
    var $centerCard = this.$( '.hero-card' );

    if ( this.cards.length > 1 ) {
      $centerCard.attr( 'data-id', this.cards[ 1 ].id );
      this.generateCardEl( this.cards[ 2 ].get( 'slider' ), this.cards[ 2 ].id ).insertBefore( $centerCard );
      this.generateCardEl( this.cards[ 0 ].get( 'slider' ), this.cards[ 0 ].id ).insertAfter( $centerCard );
    }

    this.prepHotspots();
    this.positionCards();
    this.transitionIn();

  },

  prepHotspots: function () {
    var $heroProduct;
    if ( !this.$( '.left-hotspot, .right-hotspot' ).length ) {
      $heroProduct = this.$( '.hero-product' );
      $heroProduct.append( '<div class="left-hotspot" style="z-index: 13; cursor: pointer; position: absolute; opacity:0; left: 0; top: 0; bottom: 0; right: 70%;"></div>' );
      $heroProduct.append( '<div class="right-hotspot" style="z-index: 13; cursor: pointer; position: absolute; opacity:0; left: 70%; top: 0; bottom: 0; right: 0;"></div>' );
    }
  },

  remove: function () {
    $( window ).off( 'resize.slider' );
    View.prototype.remove.apply( this );
  }

} );
