'use strict';

var _ = require( 'lodash' );
var $ = require( 'jquery' );
require( 'velocity-animate' );

var QS = require( 'query-string' );
var traverse = require( 'traverse' );
var analytics = require( 'djed/analytics' );

var ActiveToggle = require( 'djed/lib/models/ActiveToggle' );
var Modal = require( 'djed/lib/components/Modal' );

var Stories = require( './models/Stories' );
var InviteRequest = require( './models/InviteRequest' );
var ContactUs = require( './models/ContactUs' );

var Slider = require( './components/Slider' );
var Mark = require( './components/Mark' );
var ProductShot = require( './components/ProductShot' );
var PrivacyExample = require( './components/PrivacyExample' );
var RequestInvite = require( './components/RequestInvite' );
var Footer = require( './components/Footer' );
var InviteToggle = require( './components/InviteToggle' );
var InviteModal = require( './components/InviteModal' );
var ContactUsForm = require( './components/ContactUs' );
var StoryMenu = require( './components/StoryMenu' );

var getTrackingSource = function () {
  var trackingSource = QS.parse( window.location.search )[ 'utm_source' ] || '';
  if ( typeof ( Storage ) !== "undefined" ) {
    if ( _.isEmpty( trackingSource ) ) {
      trackingSource = sessionStorage.trackingSource;
    } else {
      sessionStorage.trackingSource = trackingSource;
    }
  }
  return trackingSource;
};

var pushImage = function ( src ) {
  var img = new Image();
  img.src = src;
};

var preloadImagePaths = function ( list ) {
  _.each( list, function ( tree ) {
    traverse( tree ).forEach( function ( val ) {
      if ( _.isObject( val ) ) {
        _( val ).keys( val ).each( function ( key ) {
          if ( _.isString( key ) ) {

            if ( key.indexOf( 'imagepath' ) !== -1 ) {
              pushImage( val[ key ] );
            } else if ( key === 'images-to-cache' ) {
              _( val[ key ] ).each( function ( src ) {
                pushImage( src );
              } );
            }

          }
        } );
      }
    } );
  } );
};

module.exports = function ( config ) {

  $( function () {

    require( 'fastclick' )( document.body );

    // weird dance since they override window.analytics after load
    var eventTracker = analytics.initialize( config.SEGMENTIO_WRITE_KEY );
    eventTracker.ready( function () {
      eventTracker = analytics.instance();
    } );

    var $mark = $( '#mark' );
    var $slider = $( '#slider' );
    var $productShot = $( '#product-shot' );
    var $privacyExample = $( '#privacy-example' );
    var $requestInvite = $( '#request-invite' );
    var $footer = $( '#footer' );
    var $storyMenu = $( '#story-menu' );

    var $contactUs = $( '.contact-us' );

    var $inviteToggles = $( '.request-invite-toggle' );

    var slideTime = 300;

    var components = {};

    // collection of stories the app displays
    var stories = new Stories( config.stories, {
      active: config.active
    } );
    var previousStory;

    var inviteModalToggle = new ActiveToggle();

    var inviteRequest = new InviteRequest( {
      campaign: getTrackingSource()
    }, {
      baseUrl: config.API_BASE_URL
    } );

    var contactUsModel = new ContactUs( null, {
      baseUrl: config.API_BASE_URL
    } );

    var scrollToTop = function () {
      $( "html" ).velocity( "scroll", {
        duration: slideTime * 2 * ( $( document ).scrollTop() / $( document ).height() ),
        easing: 'easeInOutQuint',
        offset: 0,
        mobileHA: false
      } );
    };

    setTimeout( function () {
      preloadImagePaths( config.stories );
    }, 500 );


    stories.on( 'switch', function ( newStory ) {
      eventTracker.track( 'Story change', {
        'new-story': newStory,
        'previous-story': previousStory
      } );
      previousStory = newStory;
    } );

    if ( $mark.length ) {
      components.mark = new Mark( {
        el: $mark,
        model: stories
      } );
    }

    if ( $slider.length ) {
      components.slider = new Slider( {
        el: $slider,
        model: stories,
        slideTime: slideTime
      } );

      components.slider.on( 'track', function ( key, payload ) {
        eventTracker.track( key, payload );
      } );
    }

    if ( $productShot.length ) {
      components.productShot = new ProductShot( {
        el: $productShot,
        model: stories,
        slideTime: slideTime
      } );
    }

    if ( $privacyExample.length ) {
      components.privacyExample = new PrivacyExample( {
        el: $privacyExample,
        model: stories
      } );
    }

    if ( $requestInvite.length ) {
      components.requestInvite = new RequestInvite( {
        el: $requestInvite,
        model: stories,
        tracker: eventTracker
      } );

      components.requestInvite.on( 'track', function ( key, payload ) {
        eventTracker.track( key, payload );
      } );
    }

    if ( $footer.length ) {
      components.footer = new Footer( {
        el: $footer,
        model: stories
      } );
    }

    if ( $contactUs.length ) {
      components.contactUs = new ContactUsForm( {
        el: $contactUs,
        model: contactUsModel
      } );

      components.contactUs.on( 'track', function ( key, payload ) {
        eventTracker.track( key, payload );
      } );
    }

    if ( $storyMenu.length ) {
      components.storyMenu = new StoryMenu( {
        el: $storyMenu,
        model: stories,
        doHide: components.mark.isInView()
      } );

      if ( components.mark ) {
        components.mark.on( 'enter', function ( direction ) {
          if ( direction === 'up' ) {
            eventTracker.track( 'Story Menu Out' );
            components.storyMenu.transitionOut();
          }
        } );

        components.mark.on( 'exited', function () {
          eventTracker.track( 'Story Menu In' );
          components.storyMenu.transitionIn();
        } );
      }

      components.storyMenu.on( 'switched', function () {
        eventTracker.track( 'Scrolling To Top' );
        scrollToTop();
      } );
    }

    // request invite modal
    // TODO break into separate controller

    components.inviteModal = new InviteModal( {
      model: inviteRequest,
      template: $( '#invite-modal-template' ).html(),
    } );

    components.inviteModal.on( 'track', function ( key, payload ) {
      eventTracker.track( key, payload );
    } );

    function renderModal() {
      return components.inviteModal.render().$el;
    }

    components.modal = new Modal( {
      $cover: $( '.cover-modal' ),
      render: renderModal,
      activeToggleModel: inviteModalToggle
    } );

    components.inviteToggles = [];
    $inviteToggles.each( function () {
      components.inviteToggles.push( new InviteToggle( {
        el: this,
        toggle: inviteModalToggle,
      } ) );
    } );

    inviteModalToggle.on( 'change', function () {
      if ( inviteModalToggle.isActive() ) {
        eventTracker.track( 'Invite Modal Opening' );
        scrollToTop();
      } else {
        eventTracker.track( 'Invite Modal Closing' );
      }
    } );

    components.inviteModal.on( 'close', function () {
      inviteModalToggle.toggle( false );
    } );

    components.modal.on( 'opening', function () {
      components.inviteModal.render();
      components.inviteModal.fillInputs();
      components.inviteModal.transitionIn();
    } );

    components.modal.on( 'closing', function () {
      components.inviteModal.transitionOut();
    } );

  } );

};
